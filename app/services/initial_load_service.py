import os
from sqlalchemy import create_engine, Table, Column, Integer, String, MetaData
from sqlalchemy.orm import sessionmaker
from flask import current_app

from ..core.extensions import db
from .discount_service import process_discounts_from_excel

from ..models import auth_models
from ..models import planning_models
from ..models.estate_models import EstateHouse, EstateSell, EstateDeal
from ..models.finance_models import FinanceOperation
from ..models.funnel_models import EstateBuy, EstateBuysStatusLog

CURRENT_DIR = os.path.dirname(__file__)
PROJECT_ROOT = os.path.abspath(os.path.join(CURRENT_DIR, '..', '..'))
DISCOUNTS_EXCEL_PATH = os.path.join(PROJECT_ROOT, 'data_sources', 'discounts_template.xlsx')

CHUNK_SIZE = 60000  # –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –¥–ª—è –∫–æ–º–º–∏—Ç–æ–≤


def _migrate_mysql_estate_data_to_sqlite():
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ MySQL, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –≤ SQLite –ø–æ—Ä—Ü–∏—è–º–∏.
    """
    print("[MIGRATE] üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MySQL...")

    mysql_uri = current_app.config['SOURCE_MYSQL_URI']
    mysql_engine = create_engine(mysql_uri)
    MySQLSession = sessionmaker(bind=mysql_engine)
    mysql_session = MySQLSession()

    try:
        print("[MIGRATE] üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        # (–ö–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        db.session.query(EstateDeal).delete()
        db.session.query(EstateSell).delete()
        db.session.query(EstateHouse).delete()
        db.session.query(FinanceOperation).delete()
        db.session.query(EstateBuysStatusLog).delete()
        db.session.query(EstateBuy).delete()
        db.session.query(auth_models.SalesManager).delete()
        db.session.query(planning_models.ManagerSalesPlan).delete()
        db.session.commit()
        print("[MIGRATE] ‚úîÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.")

        # --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---

        # 1. –ú–∏–≥—Ä–∞—Ü–∏—è estate_houses
        print("[MIGRATE] üè° –ó–∞–≥—Ä—É–∑–∫–∞ 'estate_houses'...")
        mysql_houses_query = mysql_session.query(EstateHouse).filter(
            EstateHouse.complex_name.isnot(None)).execution_options(stream_results=True)
        count = 0
        for house in mysql_houses_query:
            db.session.add(
                EstateHouse(id=house.id, complex_name=house.complex_name, name=house.name, geo_house=house.geo_house))
            count += 1
            if count % CHUNK_SIZE == 0:
                db.session.commit()
                print(f"[MIGRATE]   - –ó–∞–ø–∏—Å–∞–Ω–æ {count} –¥–æ–º–æ–≤...")
        db.session.commit()
        print(f"[MIGRATE] ‚úîÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è 'estate_houses' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ: {count}.")

        # 2. –ú–∏–≥—Ä–∞—Ü–∏—è estate_buys
        print("[MIGRATE] üìà –ó–∞–≥—Ä—É–∑–∫–∞ 'estate_buys'...")
        mysql_buys_query = mysql_session.query(EstateBuy).execution_options(stream_results=True)
        count = 0
        for buy in mysql_buys_query:
            db.session.add(
                EstateBuy(id=buy.id, date_added=buy.date_added, created_at=buy.created_at, status_name=buy.status_name,
                          custom_status_name=buy.custom_status_name))
            count += 1
            if count % CHUNK_SIZE == 0:
                db.session.commit()
                print(f"[MIGRATE]   - –ó–∞–ø–∏—Å–∞–Ω–æ {count} –∑–∞—è–≤–æ–∫...")
        db.session.commit()
        print(f"[MIGRATE] ‚úîÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è 'estate_buys' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ: {count}.")

        # 3. –ú–∏–≥—Ä–∞—Ü–∏—è estate_buys_statuses_log
        print("[MIGRATE] üìú –ó–∞–≥—Ä—É–∑–∫–∞ 'estate_buys_statuses_log'...")
        mysql_logs_query = mysql_session.query(EstateBuysStatusLog).execution_options(stream_results=True)
        count = 0
        for log in mysql_logs_query:
            db.session.add(EstateBuysStatusLog(id=log.id, log_date=log.log_date, estate_buy_id=log.estate_buy_id,
                                               status_to_name=log.status_to_name,
                                               status_custom_to_name=log.status_custom_to_name))
            count += 1
            if count % CHUNK_SIZE == 0:
                db.session.commit()
                print(f"[MIGRATE]   - –ó–∞–ø–∏—Å–∞–Ω–æ {count} –ª–æ–≥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤...")
        db.session.commit()
        print(f"[MIGRATE] ‚úîÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è 'estate_buys_statuses_log' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ: {count}.")

        # 4. –ú–∏–≥—Ä–∞—Ü–∏—è estate_sells
        print("[MIGRATE] üè¢ –ó–∞–≥—Ä—É–∑–∫–∞ 'estate_sells'...")
        ESTATE_SELL_CATEGORY_MAPPING = {'flat': '–ö–≤–∞—Ä—Ç–∏—Ä–∞', 'comm': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ', 'garage': '–ü–∞—Ä–∫–æ–≤–∫–∞',
                                        'storageroom': '–ö–ª–∞–¥–æ–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ'}
        mysql_sells_query = mysql_session.query(EstateSell).execution_options(stream_results=True)
        count = 0
        for sell in mysql_sells_query:
            db.session.add(EstateSell(id=sell.id, house_id=sell.house_id,
                                      estate_sell_category=ESTATE_SELL_CATEGORY_MAPPING.get(sell.estate_sell_category,
                                                                                            sell.estate_sell_category),
                                      estate_floor=sell.estate_floor, estate_rooms=sell.estate_rooms,
                                      estate_price_m2=sell.estate_price_m2,
                                      estate_sell_status_name=sell.estate_sell_status_name,
                                      estate_price=sell.estate_price, estate_area=sell.estate_area))
            count += 1
            if count % CHUNK_SIZE == 0:
                db.session.commit()
                print(f"[MIGRATE]   - –ó–∞–ø–∏—Å–∞–Ω–æ {count} –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–æ–¥–∞–∂–∏...")
        db.session.commit()
        print(f"[MIGRATE] ‚úîÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è 'estate_sells' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ: {count}.")

        # 5. –ú–∏–≥—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        print("[MIGRATE] üßë‚Äçüíº –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
        meta = MetaData()
        mysql_users_table = Table('users', meta, Column('id', Integer, primary_key=True), Column('users_name', String))
        mysql_managers_query = mysql_session.query(mysql_users_table).execution_options(stream_results=True)
        processed_names = set()
        for manager in mysql_managers_query:
            cleaned_name = (manager.users_name or "").strip()
            if cleaned_name and cleaned_name not in processed_names:
                processed_names.add(cleaned_name)
                db.session.add(auth_models.SalesManager(id=manager.id, full_name=cleaned_name))
        db.session.commit()
        print(f"[MIGRATE] ‚úîÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è 'sales_managers' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(processed_names)}.")

        # 6. –ú–∏–≥—Ä–∞—Ü–∏—è estate_deals
        print("[MIGRATE] ü§ù –ó–∞–≥—Ä—É–∑–∫–∞ 'estate_deals'...")
        mysql_deals_query = mysql_session.query(EstateDeal).execution_options(stream_results=True)
        count = 0
        for deal in mysql_deals_query:
            db.session.add(
                EstateDeal(id=deal.id, estate_sell_id=deal.estate_sell_id, deal_status_name=deal.deal_status_name,
                           deal_manager_id=deal.deal_manager_id, agreement_date=deal.agreement_date,
                           preliminary_date=deal.preliminary_date, deal_sum=deal.deal_sum))
            count += 1
            if count % CHUNK_SIZE == 0:
                db.session.commit()
                print(f"[MIGRATE]   - –ó–∞–ø–∏—Å–∞–Ω–æ {count} —Å–¥–µ–ª–æ–∫...")
        db.session.commit()
        print(f"[MIGRATE] ‚úîÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è 'estate_deals' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ: {count}.")

        # 7. –ú–∏–≥—Ä–∞—Ü–∏—è finances
        print("[MIGRATE] üí∞ –ó–∞–≥—Ä—É–∑–∫–∞ 'finances'...")
        mysql_finances_query = mysql_session.query(FinanceOperation).execution_options(stream_results=True)
        count = 0
        for fin_op in mysql_finances_query:
            db.session.add(FinanceOperation(id=fin_op.id, estate_sell_id=fin_op.estate_sell_id, summa=fin_op.summa,
                                            status_name=fin_op.status_name, date_added=fin_op.date_added))
            count += 1
            if count % CHUNK_SIZE == 0:
                db.session.commit()
                print(f"[MIGRATE]   - –ó–∞–ø–∏—Å–∞–Ω–æ {count} —Ñ–∏–Ω. –æ–ø–µ—Ä–∞—Ü–∏–π...")
        db.session.commit()
        print(f"[MIGRATE] ‚úîÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è 'finances' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ: {count}.")

        # --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---

        print("[MIGRATE] ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ SQLite.")

    except Exception as e:
        print(f"[MIGRATE] ‚ùå –û–®–ò–ë–ö–ê –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        db.session.rollback()
        raise e
    finally:
        mysql_session.close()
        print("[MIGRATE] üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MySQL –∑–∞–∫—Ä—ã—Ç–æ.")


def load_all_initial_data(is_initial_setup=False):
    """
    –ù–∞–ø–æ–ª–Ω—è–µ—Ç –í–°–ï –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–û–ú –∑–∞–ø—É—Å–∫–µ.
    """
    print("\n[INITIAL LOAD] üöÄ –ù–ê–ß–ê–õ–û –ü–†–û–¶–ï–°–°–ê –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•...")

    if is_initial_setup:
        print("[INITIAL LOAD] üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤–æ –≤—Å–µ—Ö –±–∞–∑–∞—Ö...")
        db.create_all()
        print("[INITIAL LOAD] ‚úîÔ∏è –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã.")

    try:
        _migrate_mysql_estate_data_to_sqlite()

        print("[INITIAL LOAD] üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–µ—Ä—Å–∏–π —Å–∫–∏–¥–æ–∫...")
        db.session.query(planning_models.Discount).delete(synchronize_session=False)
        db.session.query(planning_models.DiscountVersion).delete(synchronize_session=False)
        db.session.commit()
        print("[INITIAL LOAD] ‚úîÔ∏è –í–µ—Ä—Å–∏–∏ —Å–∫–∏–¥–æ–∫ –æ—á–∏—â–µ–Ω—ã.")

        if os.path.exists(DISCOUNTS_EXCEL_PATH):
            print(f"[INITIAL LOAD] üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫–∏–¥–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞: {DISCOUNTS_EXCEL_PATH}")
            initial_version = planning_models.DiscountVersion(
                version_number=1,
                comment="–ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Excel",
                is_active=True
            )
            db.session.add(initial_version)
            db.session.flush()
            process_discounts_from_excel(DISCOUNTS_EXCEL_PATH, initial_version.id)
            print("[INITIAL LOAD] ‚úîÔ∏è –°–∫–∏–¥–∫–∏ –∏–∑ Excel —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –≤ '–í–µ—Ä—Å–∏—é 1'.")
        else:
            print(f"[INITIAL LOAD] ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ({DISCOUNTS_EXCEL_PATH}).")

        db.session.commit()
        print("[INITIAL LOAD] ‚úÖ –ü–†–û–¶–ï–°–° –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò –ó–ê–í–ï–†–®–ï–ù.\n")
    except Exception as e:
        print(f"[INITIAL LOAD] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.session.rollback()
        raise e


def refresh_estate_data_from_mysql():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ MySQL. –ù–ï –¢–†–û–ì–ê–ï–¢ –°–ö–ò–î–ö–ò.
    """
    print("\n[REFRESH DATA] üîÑ –ù–ê–ß–ê–õ–û –ü–†–û–¶–ï–°–°–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ò–ó MySQL...")
    try:
        _migrate_mysql_estate_data_to_sqlite()
        print("[REFRESH DATA] ‚úÖ –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–´ –ò–ó MySQL.\n")
        return True
    except Exception as e:
        print(f"[REFRESH DATA] ‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ë–ù–û–í–õ–ï–ù–ò–ò –î–ê–ù–ù–´–•: {e}")
        return False