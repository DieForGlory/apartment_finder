import os
from sqlalchemy import create_engine, Table, Column, Integer, String, MetaData
from sqlalchemy.orm import sessionmaker
from flask import current_app

from ..core.extensions import db
from .discount_service import process_discounts_from_excel

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π
from ..models import auth_models
from ..models import planning_models
from ..models.estate_models import EstateHouse, EstateSell, EstateDeal
from ..models.finance_models import FinanceOperation
from ..models.funnel_models import EstateBuy, EstateBuysStatusLog

CURRENT_DIR = os.path.dirname(__file__)
PROJECT_ROOT = os.path.abspath(os.path.join(CURRENT_DIR, '..', '..'))
DISCOUNTS_EXCEL_PATH = os.path.join(PROJECT_ROOT, 'data_sources', 'discounts_template.xlsx')


def _migrate_mysql_estate_data_to_sqlite():
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ MySQL, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite.
    """
    print("[MIGRATE] üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MySQL...")

    mysql_uri = current_app.config['SOURCE_MYSQL_URI']
    mysql_engine = create_engine(mysql_uri)
    MySQLSession = sessionmaker(bind=mysql_engine)
    mysql_session = MySQLSession()

    try:
        print("[MIGRATE] üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        db.session.query(EstateDeal).delete()
        db.session.query(EstateSell).delete()
        db.session.query(EstateHouse).delete()
        db.session.query(FinanceOperation).delete()
        db.session.query(EstateBuysStatusLog).delete()
        db.session.query(EstateBuy).delete()

        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ auth_db –∏ planning_db
        db.session.query(auth_models.SalesManager).delete()
        db.session.query(planning_models.ManagerSalesPlan).delete()

        db.session.commit()
        print("[MIGRATE] ‚úîÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.")

        # 1. –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã estate_houses
        print("[MIGRATE] üè° –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'estate_houses'...")
        mysql_houses = mysql_session.query(EstateHouse).filter(EstateHouse.complex_name.isnot(None)).all()
        for house in mysql_houses:
            new_house = EstateHouse(
                id=house.id,
                complex_name=house.complex_name,
                name=house.name,
                geo_house=house.geo_house
            )
            db.session.add(new_house)
        print(f"[MIGRATE] ‚úîÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ –∑–∞–ø–∏—Å–∏ –¥–æ–º–æ–≤: {len(mysql_houses)}")

        print("[MIGRATE] funnel: –ó–∞—è–≤–∫–∏ –∏–∑ 'estate_buys'...")
        mysql_buys = mysql_session.query(EstateBuy).all()
        for buy in mysql_buys:
            new_buy = EstateBuy(
                id=buy.id,
                date_added=buy.date_added,
                created_at=buy.created_at,
                status_name=buy.status_name,
                custom_status_name=buy.custom_status_name
            )
            db.session.add(new_buy)
        print(f"[MIGRATE] ‚úîÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ –∑–∞–ø–∏—Å–∏ –∑–∞—è–≤–æ–∫: {len(mysql_buys)}")

        print("[MIGRATE] funnel: –õ–æ–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ 'estate_buys_statuses_log'...")
        mysql_logs = mysql_session.query(EstateBuysStatusLog).all()
        for log in mysql_logs:
            new_log = EstateBuysStatusLog(
                id=log.id,
                log_date=log.log_date,
                estate_buy_id=log.estate_buy_id,
                status_to_name=log.status_to_name,
                status_custom_to_name=log.status_custom_to_name
            )
            db.session.add(new_log)
        print(f"[MIGRATE] ‚úîÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤: {len(mysql_logs)}")

        # 2. –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã estate_sells
        print("[MIGRATE] üè¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'estate_sells'...")
        mysql_sells = mysql_session.query(EstateSell).all()
        ESTATE_SELL_CATEGORY_MAPPING = {
            'flat': '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
            'comm': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ',
            'garage': '–ü–∞—Ä–∫–æ–≤–∫–∞',
            'storageroom': '–ö–ª–∞–¥–æ–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ',
        }
        for sell in mysql_sells:
            new_sell = EstateSell(
                id=sell.id,
                house_id=sell.house_id,
                estate_sell_category=ESTATE_SELL_CATEGORY_MAPPING.get(sell.estate_sell_category,
                                                                      sell.estate_sell_category),
                estate_floor=sell.estate_floor,
                estate_rooms=sell.estate_rooms,
                estate_price_m2=sell.estate_price_m2,
                estate_sell_status_name=sell.estate_sell_status_name,
                estate_price=sell.estate_price,
                estate_area=sell.estate_area
            )
            db.session.add(new_sell)
        print(f"[MIGRATE] ‚úîÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ –∑–∞–ø–∏—Å–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–æ–¥–∞–∂–∏: {len(mysql_sells)}")

        # 3. –ú–∏–≥—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        print("[MIGRATE] üßë‚Äçüíº –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'users'...")
        meta = MetaData()
        mysql_users_table = Table('users', meta, Column('id', Integer, primary_key=True), Column('users_name', String))
        mysql_managers = mysql_session.query(mysql_users_table).all()
        processed_names = set()
        added_count = 0
        for manager in mysql_managers:
            cleaned_name = (manager.users_name or "").strip()
            if not cleaned_name or cleaned_name in processed_names:
                continue
            processed_names.add(cleaned_name)
            new_manager = auth_models.SalesManager(id=manager.id, full_name=cleaned_name)
            db.session.add(new_manager)
            added_count += 1
        print(
            f"[MIGRATE] ‚úîÔ∏è –ù–∞–π–¥–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ: {len(mysql_managers)}. –î–æ–±–∞–≤–ª–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {added_count}")

        # 4. –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã estate_deals
        print("[MIGRATE] ü§ù –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'estate_deals'...")
        mysql_deals = mysql_session.query(EstateDeal).all()
        for deal in mysql_deals:
            new_deal = EstateDeal(
                id=deal.id,
                estate_sell_id=deal.estate_sell_id,
                deal_status_name=deal.deal_status_name,
                deal_manager_id=deal.deal_manager_id,
                agreement_date=deal.agreement_date,
                preliminary_date=deal.preliminary_date,
                deal_sum=deal.deal_sum
            )
            db.session.add(new_deal)
        print(f"[MIGRATE] ‚úîÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–æ–∫: {len(mysql_deals)}")

        # 5. –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã finances
        print("[MIGRATE] üí∞ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'finances'...")
        mysql_finances = mysql_session.query(FinanceOperation).all()
        for fin_op in mysql_finances:
            new_fin_op = FinanceOperation(
                id=fin_op.id,
                estate_sell_id=fin_op.estate_sell_id,
                summa=fin_op.summa,
                status_name=fin_op.status_name,
                date_added=fin_op.date_added
            )
            db.session.add(new_fin_op)
        print(f"[MIGRATE] ‚úîÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ –∑–∞–ø–∏—Å–∏ —Ñ–∏–Ω. –æ–ø–µ—Ä–∞—Ü–∏–π: {len(mysql_finances)}")

        db.session.commit()
        print("[MIGRATE] ‚úîÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ SQLite.")

    except Exception as e:
        print(f"[MIGRATE] ‚ùå –û–®–ò–ë–ö–ê –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        db.session.rollback()
        raise e
    finally:
        mysql_session.close()
        print("[MIGRATE] üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MySQL –∑–∞–∫—Ä—ã—Ç–æ.")


def load_all_initial_data(is_initial_setup=False):
    """
    –ù–∞–ø–æ–ª–Ω—è–µ—Ç –í–°–ï –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–û–ú –∑–∞–ø—É—Å–∫–µ.
    """
    print("\n[INITIAL LOAD] üöÄ –ù–ê–ß–ê–õ–û –ü–†–û–¶–ï–°–°–ê –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•...")

    if is_initial_setup:
        print("[INITIAL LOAD] üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤–æ –≤—Å–µ—Ö –±–∞–∑–∞—Ö...")
        db.create_all()
        print("[INITIAL LOAD] ‚úîÔ∏è –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã.")

    try:
        _migrate_mysql_estate_data_to_sqlite()

        print("[INITIAL LOAD] üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–µ—Ä—Å–∏–π —Å–∫–∏–¥–æ–∫...")
        db.session.query(planning_models.Discount).delete(synchronize_session=False)
        db.session.query(planning_models.DiscountVersion).delete(synchronize_session=False)
        db.session.commit()
        print("[INITIAL LOAD] ‚úîÔ∏è –í–µ—Ä—Å–∏–∏ —Å–∫–∏–¥–æ–∫ –æ—á–∏—â–µ–Ω—ã.")

        if os.path.exists(DISCOUNTS_EXCEL_PATH):
            print(f"[INITIAL LOAD] üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫–∏–¥–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞: {DISCOUNTS_EXCEL_PATH}")
            initial_version = planning_models.DiscountVersion(
                version_number=1,
                comment="–ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Excel",
                is_active=True
            )
            db.session.add(initial_version)
            db.session.flush()
            process_discounts_from_excel(DISCOUNTS_EXCEL_PATH, initial_version.id)
            print("[INITIAL LOAD] ‚úîÔ∏è –°–∫–∏–¥–∫–∏ –∏–∑ Excel —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –≤ '–í–µ—Ä—Å–∏—é 1'.")
        else:
            print(f"[INITIAL LOAD] ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ({DISCOUNTS_EXCEL_PATH}).")

        db.session.commit()
        print("[INITIAL LOAD] ‚úÖ –ü–†–û–¶–ï–°–° –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò –ó–ê–í–ï–†–®–ï–ù.\n")
    except Exception as e:
        print(f"[INITIAL LOAD] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.session.rollback()
        raise e


def refresh_estate_data_from_mysql():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ MySQL. –ù–ï –¢–†–û–ì–ê–ï–¢ –°–ö–ò–î–ö–ò.
    """
    print("\n[REFRESH DATA] üîÑ –ù–ê–ß–ê–õ–û –ü–†–û–¶–ï–°–°–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ò–ó MySQL...")
    try:
        _migrate_mysql_estate_data_to_sqlite()
        print("[REFRESH DATA] ‚úÖ –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–´ –ò–ó MySQL.\n")
        return True
    except Exception as e:
        print(f"[REFRESH DATA] ‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ë–ù–û–í–õ–ï–ù–ò–ò –î–ê–ù–ù–´–•: {e}")
        return False