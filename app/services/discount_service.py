import json
import copy
from datetime import date, datetime
from sqlalchemy.orm import joinedload
from flask import render_template_string
import requests
from ..core.extensions import db
from ..models.discount_models import Discount, DiscountVersion, PropertyType, PaymentMethod, ComplexComment
from ..models.estate_models import EstateSell
from .email_service import send_email
import pandas as pd
import io


def delete_draft_version(version_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞."""
    version_to_delete = DiscountVersion.query.get(version_id)
    if not version_to_delete:
        raise ValueError("–í–µ—Ä—Å–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –≤–µ—Ä—Å–∏—è –∫–æ–≥–¥–∞-–ª–∏–±–æ –∞–∫—Ç–∏–≤–Ω–∞
    if version_to_delete.was_ever_activated:
        raise PermissionError("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

    print(f"[DISCOUNT SERVICE] üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –≤–µ—Ä—Å–∏–∏ ‚Ññ{version_to_delete.version_number} (ID: {version_id})")
    db.session.delete(version_to_delete)
    db.session.commit()
    print(f"[DISCOUNT SERVICE] ‚úîÔ∏è –ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")

def get_current_usd_rate():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD –∫ UZS —Å API –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å (float) –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    # API –¶–ë–†–£: https://cbu.uz/ru/arkhiv-kursov-valyut/
    # –ü—Ä–∏–º–µ—Ä API: https://cbu.uz/oz/arkhiv-kursov-valyut/json/
    # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    # https://cbu.uz/oz/arkhiv-kursov-valyut/json/all/
    # –ò—Å–∫–∞—Ç—å –ø–æ "Ccy":"USD"

    api_url = "https://cbu.uz/oz/arkhiv-kursov-valyut/json/"
    print(f"\n[DISCOUNT SERVICE] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USD —Å API –¶–ë: {api_url}")

    try:
        response = requests.get(api_url, timeout=5, verify=False)  # –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)
        data = response.json()

        for currency_data in data:
            if currency_data.get("Ccy") == "USD":
                rate = float(currency_data.get("Rate").replace(',', '.'))  # –ó–∞–º–µ–Ω–∏—Ç—å –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è float
                print(f"[DISCOUNT SERVICE] ‚úîÔ∏è –ü–æ–ª—É—á–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD —Å –¶–ë: {rate}")
                return rate

        print("[DISCOUNT SERVICE] ‚ùï –ö—É—Ä—Å USD –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API –¶–ë.")
        return None

    except requests.exceptions.RequestException as e:
        print(f"[DISCOUNT SERVICE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¶–ë: {e}")
        return None
    except (json.JSONDecodeError, AttributeError, KeyError, ValueError) as e:
        print(f"[DISCOUNT SERVICE] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ API –¶–ë: {e}")
        return None
def _normalize_percentage(value):
    try:
        num_value = float(value)
        if num_value > 1.0: return num_value / 100.0
        return num_value
    except (ValueError, TypeError):
        return 0.0


def process_discounts_from_excel(file_path: str, version_id: int):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Excel-—Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –£–ö–ê–ó–ê–ù–ù–û–ô –í–ï–†–°–ò–ò.
    """
    print(f"\n[DISCOUNT SERVICE] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {file_path} –¥–ª—è –≤–µ—Ä—Å–∏–∏ ID: {version_id}")
    df = pd.read_excel(file_path)

    # --- –ù–û–í–û–ï: –û–¢–õ–ê–î–û–ß–ù–´–ô –í–´–í–û–î –î–ê–¢–ê–§–†–ï–ô–ú–ê ---
    print("[DISCOUNT SERVICE] –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π DataFrame:")
    print(df.head())  # –í—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ DataFrame
    if df.empty:
        print("[DISCOUNT SERVICE] DataFrame –ø—É—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")
        return "–û—à–∏–±–∫–∞: –§–∞–π–ª Excel –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö."
    # --- –ö–û–ù–ï–¶ –û–¢–õ–ê–î–û–ß–ù–û–ì–û –í–´–í–û–î–ê ---

    created_count, updated_count = 0, 0

    existing_discounts = {
        (d.complex_name, d.property_type, d.payment_method): d
        for d in Discount.query.filter_by(version_id=version_id).all()
    }

    # --- –ù–û–í–û–ï: –û–¢–õ–ê–î–û–ß–ù–´–ô –ë–õ–û–ö TRY-EXCEPT –î–õ–Ø –ö–ê–ñ–î–û–ô –°–¢–†–û–ö–ò ---
    for index, row in df.iterrows():
        try:
            # --- –ù–û–í–û–ï: –í–´–í–û–î –¢–ï–ö–£–©–ï–ô –°–¢–†–û–ö–ò –ò–ó EXCEL ---
            print(f"[DISCOUNT SERVICE] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ {index}: {row.to_dict()}")
            # --- –ö–û–ù–ï–¶ –í–´–í–û–î–ê ---

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = ['–ñ–ö', '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', '–¢–∏–ø –æ–ø–ª–∞—Ç—ã']
            for col in required_columns:
                if col not in row:
                    raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: '{col}' –≤ —Å—Ç—Ä–æ–∫–µ {index}")

            # –î–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è property_type –∏ payment_method
            prop_type_val = row['–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏']
            payment_method_val = row['–¢–∏–ø –æ–ø–ª–∞—Ç—ã']

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç Enum
            try:
                property_type_enum = PropertyType(prop_type_val)
            except ValueError:
                raise ValueError(
                    f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏': '{prop_type_val}' –≤ —Å—Ç—Ä–æ–∫–µ {index}. –û–∂–∏–¥–∞–µ—Ç—Å—è: {', '.join([pt.value for pt in PropertyType])}")

            try:
                payment_method_enum = PaymentMethod(payment_method_val)
            except ValueError:
                raise ValueError(
                    f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π '–¢–∏–ø –æ–ø–ª–∞—Ç—ã': '{payment_method_val}' –≤ —Å—Ç—Ä–æ–∫–µ {index}. –û–∂–∏–¥–∞–µ—Ç—Å—è: {', '.join([pm.value for pm in PaymentMethod])}")

            key = (
                row['–ñ–ö'],
                property_type_enum,
                payment_method_enum
            )
            discount = existing_discounts.get(key)

            if not discount:
                discount = Discount(
                    version_id=version_id,
                    complex_name=row['–ñ–ö'],
                    property_type=property_type_enum,
                    payment_method=payment_method_enum
                )
                db.session.add(discount)
                created_count += 1
            else:
                updated_count += 1

            # --- –ù–û–í–û–ï: –í–´–í–û–î –ó–ù–ê–ß–ï–ù–ò–ô –ü–ï–†–ï–î –ü–†–ò–°–í–û–ï–ù–ò–ï–ú ---
            print(f"[DISCOUNT SERVICE] –ó–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫ –¥–ª—è '{row['–ñ–ö']}':")
            print(f"  –ú–ü–ü: {row.get('–ú–ü–ü')}, –†–û–ü: {row.get('–†–û–ü')}, –ö–î: {row.get('–ö–î')}")
            # --- –ö–û–ù–ï–¶ –í–´–í–û–î–ê ---

            discount.mpp = _normalize_percentage(row.get('–ú–ü–ü'))
            discount.rop = _normalize_percentage(row.get('–†–û–ü'))
            discount.kd = _normalize_percentage(row.get('–ö–î'))
            discount.opt = _normalize_percentage(row.get('–û–ü–¢'))
            discount.gd = _normalize_percentage(row.get('–ì–î'))
            discount.holding = _normalize_percentage(row.get('–•–æ–ª–¥–∏–Ω–≥'))
            discount.shareholder = _normalize_percentage(row.get('–ê–∫—Ü–∏–æ–Ω–µ—Ä'))
            discount.action = _normalize_percentage(row.get('–ê–∫—Ü–∏—è'))

            cadastre_date_val = row.get('–î–∞—Ç–∞ –∫–∞–¥–∞—Å—Ç—Ä–∞')
            if pd.notna(cadastre_date_val):
                try:
                    discount.cadastre_date = pd.to_datetime(cadastre_date_val).date()
                except (ValueError, TypeError):
                    print(
                        f"[DISCOUNT SERVICE] –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É –∫–∞–¥–∞—Å—Ç—Ä–∞ '{cadastre_date_val}' –≤ —Å—Ç—Ä–æ–∫–µ {index}. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é None.")
                    discount.cadastre_date = None
            else:
                discount.cadastre_date = None

        except KeyError as ke:
            print(f"[DISCOUNT SERVICE] ‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–¢–†–û–ö–ò {index} (KeyError): {ke}. –ü—Ä–æ–ø—É—Å–∫–∞—é —Å—Ç—Ä–æ–∫—É.")
            # –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –º–æ–∂–Ω–æ re-raise –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª.
            # –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏.
        except ValueError as ve:
            print(f"[DISCOUNT SERVICE] ‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–¢–†–û–ö–ò {index} (ValueError): {ve}. –ü—Ä–æ–ø—É—Å–∫–∞—é —Å—Ç—Ä–æ–∫—É.")
        except Exception as ex:
            print(
                f"[DISCOUNT SERVICE] ‚ùå –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–¢–†–û–ö–ò {index}: {type(ex).__name__}: {ex}. –ü—Ä–æ–ø—É—Å–∫–∞—é —Å—Ç—Ä–æ–∫—É.")

    # --- –ö–û–ù–ï–¶ –û–¢–õ–ê–î–û–ß–ù–û–ì–û –ë–õ–û–ö–ê ---

    print(f"[DISCOUNT SERVICE] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°–æ–∑–¥–∞–Ω–æ: {created_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}.")
    return f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫. –°–æ–∑–¥–∞–Ω–æ: {created_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}."


def generate_discount_template_excel():
    from .data_service import get_all_complex_names
    print("[DISCOUNT SERVICE] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ —Å–∫–∏–¥–æ–∫...")
    complex_names = get_all_complex_names()
    headers = ['–ñ–ö', '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', '–¢–∏–ø –æ–ø–ª–∞—Ç—ã', '–î–∞—Ç–∞ –∫–∞–¥–∞—Å—Ç—Ä–∞', '–ú–ü–ü', '–†–û–ü', '–ö–î', '–û–ü–¢', '–ì–î', '–•–æ–ª–¥–∏–Ω–≥',
               '–ê–∫—Ü–∏–æ–Ω–µ—Ä', '–ê–∫—Ü–∏—è']
    data = []
    for name in complex_names:
        for prop_type in PropertyType:
            for payment_method in PaymentMethod:
                row = {'–ñ–ö': name, '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏': prop_type.value, '–¢–∏–ø –æ–ø–ª–∞—Ç—ã': payment_method.value,
                       '–î–∞—Ç–∞ –∫–∞–¥–∞—Å—Ç—Ä–∞': '', '–ú–ü–ü': 0, '–†–û–ü': 0, '–ö–î': 0, '–û–ü–¢': 0, '–ì–î': 0, '–•–æ–ª–¥–∏–Ω–≥': 0, '–ê–∫—Ü–∏–æ–Ω–µ—Ä': 0,
                       '–ê–∫—Ü–∏—è': 0}
                data.append(row)
    df = pd.DataFrame(data, columns=headers)
    output = io.BytesIO()
    df.to_excel(output, index=False, sheet_name='–®–∞–±–ª–æ–Ω —Å–∫–∏–¥–æ–∫')
    output.seek(0)
    return output


def get_discounts_with_summary():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–°–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫", –≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ñ–ö.
    """

    active_version = DiscountVersion.query.filter_by(is_active=True).first()
    if not active_version:
        return {}

    all_discounts = active_version.discounts

    comments = ComplexComment.query.filter_by(version_id=active_version.id).all()
    comments_map = {c.complex_name: c.comment for c in comments}

    if not all_discounts:
        return {}

    discounts_map = {}
    for d in all_discounts:
        discounts_map.setdefault(d.complex_name, []).append(d)

    all_sells = EstateSell.query.options(joinedload(EstateSell.house)).all()
    sells_by_complex = {}
    for s in all_sells:
        if s.house:
            sells_by_complex.setdefault(s.house.complex_name, []).append(s)

    final_data = {}
    valid_statuses = ["–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π —Ä–µ–∑–µ—Ä–≤", "–ü–æ–¥–±–æ—Ä"]
    tag_fields = {'kd': '–ö–î', 'opt': '–û–ü–¢', 'gd': '–ì–î', 'holding': '–•–æ–ª–¥–∏–Ω–≥', 'shareholder': '–ê–∫—Ü–∏–æ–Ω–µ—Ä'}

    all_complex_names = sorted(list(discounts_map.keys()))

    for complex_name in all_complex_names:
        summary = {"sum_100_payment": 0, "sum_mortgage": 0, "months_to_cadastre": None, "avg_remainder_price_sqm": 0,
                   "available_tags": set(), "max_action_discount": 0.0}

        summary["complex_comment"] = comments_map.get(complex_name)

        discounts_in_complex = discounts_map.get(complex_name, [])
        details_by_prop_type = {}

        for discount in discounts_in_complex:
            prop_type_val = discount.property_type.value
            details_by_prop_type.setdefault(prop_type_val, []).append(discount)

        base_discount_100 = next((d for d in discounts_in_complex if
                                  d.property_type == PropertyType.FLAT and d.payment_method == PaymentMethod.FULL_PAYMENT),
                                 None)



        if base_discount_100:
            summary["sum_100_payment"] = (base_discount_100.mpp or 0) + (base_discount_100.rop or 0)
            if base_discount_100.cadastre_date:
                today = date.today()
                if base_discount_100.cadastre_date > today:
                    delta = base_discount_100.cadastre_date - today
                    summary["months_to_cadastre"] = int(delta.days / 30.44)

        base_discount_mortgage = next((d for d in discounts_in_complex if
                                       d.property_type == PropertyType.FLAT and d.payment_method == PaymentMethod.MORTGAGE),
                                      None)


        if base_discount_mortgage:
            summary["sum_mortgage"] = (base_discount_mortgage.mpp or 0) + (base_discount_mortgage.rop or 0)

        total_discount_rate = 0
        if base_discount_100:
            total_discount_rate = (base_discount_100.mpp or 0) + \
                                  (base_discount_100.rop or 0) + \
                                  (base_discount_100.kd or 0) + \
                                  (base_discount_100.action or 0)

        remainder_prices_per_sqm = []
        sells_in_complex = sells_by_complex.get(complex_name, [])

        processed_sells_count = 0
        for sell in sells_in_complex:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            is_valid_status = sell.estate_sell_status_name in valid_statuses
            is_flat_category = sell.estate_sell_category == PropertyType.FLAT.value  # –í–∞–∂–Ω–æ: PropertyType.FLAT.value –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "–ö–≤–∞—Ä—Ç–∏—Ä–∞"
            is_valid_price = sell.estate_price and sell.estate_price > 0
            is_valid_area = sell.estate_area and sell.estate_area > 0

            if (is_valid_status and is_flat_category and is_valid_price and is_valid_area):
                price_after_deduction = (sell.estate_price or 0) - 3_000_000
                if price_after_deduction > 0:
                    final_price = price_after_deduction * (1 - total_discount_rate)
                    if sell.estate_area and sell.estate_area > 0:
                        remainder_prices_per_sqm.append(final_price / sell.estate_area)
                        processed_sells_count += 1

        if remainder_prices_per_sqm:
            avg_price_per_sqm = sum(remainder_prices_per_sqm) / len(remainder_prices_per_sqm)
            avg_price_per_sqm_usd = avg_price_per_sqm / 12500.0  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            summary["avg_remainder_price_sqm"] = avg_price_per_sqm_usd
        else:
            summary["avg_remainder_price_sqm"] = 0  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —è–≤–Ω–æ 0, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö

        for discount in discounts_in_complex:
            if discount.action > summary["max_action_discount"]:
                summary["max_action_discount"] = discount.action
            for field, tag_name in tag_fields.items():
                if getattr(discount, field, 0) > 0:
                    summary["available_tags"].add(tag_name)

        final_data[complex_name] = {"summary": summary, "details": details_by_prop_type}
    return final_data


def _generate_version_comparison_summary(old_version, new_version, comments_data=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–æ—Ç—á–µ—Ç –æ —Ä–∞–∑–ª–∏—á–∏—è—Ö –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ—Ä—Å–∏—è–º–∏, –≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏."""
    if comments_data is None:
        comments_data = {}

    old_discounts = {
        (d.complex_name, d.property_type.value, d.payment_method.value): d
        for d in old_version.discounts
    }
    new_discounts = {
        (d.complex_name, d.property_type.value, d.payment_method.value): d
        for d in new_version.discounts
    }

    changes = {'added': [], 'removed': [], 'modified': [], 'user_comments': comments_data}

    for key, new_d in new_discounts.items():
        if key not in old_discounts:
            changes['added'].append(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ –¥–ª—è {key[0]} ({key[1]}, {key[2]})")
            continue

        old_d = old_discounts[key]
        diffs = []

        for field in ['mpp', 'rop', 'kd', 'opt', 'gd', 'holding', 'shareholder', 'action']:
            old_val = getattr(old_d, field)
            new_val = getattr(new_d, field)

            if abs(old_val - new_val) > 1e-9:
                delta = new_val - old_val
                old_percent = old_val * 100
                new_percent = new_val * 100
                delta_percent = abs(delta * 100)

                if delta > 0:
                    verb = "—É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞"
                else:
                    verb = "—É–º–µ–Ω—å—à–∏–ª–∞—Å—å –Ω–∞"

                diff_text = (
                    f"<b>{field.upper()}</b> {verb} {delta_percent:.1f} % "
                    f"(—Å {old_percent:.1f}% –¥–æ {new_percent:.1f}%)"
                )
                diffs.append(diff_text)

        if diffs:
            changes['modified'].append(
                f"<strong>{key[0]} ({key[1]}, {key[2]}):</strong><ul>{''.join(f'<li>{d}</li>' for d in diffs)}</ul>")

    for key, old_d in old_discounts.items():
        if key not in new_discounts:
            changes['removed'].append(f"–£–¥–∞–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ –¥–ª—è {key[0]} ({key[1]}, {key[2]})")

    email_html = render_template_string("""
        <h3>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</h3>
        <p>–í —Å–∏—Å—Ç–µ–º–µ ApartmentFinder –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–∫–∏–¥–æ–∫.</p>
        <p>
            <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è:</b> ‚Ññ{{ old_v.version_number }} (–æ—Ç {{ old_v.created_at.strftime('%Y-%m-%d %H:%M') }})<br>
            <b>–ù–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è:</b> ‚Ññ{{ new_v.version_number }} (–æ—Ç {{ new_v.created_at.strftime('%Y-%m-%d %H:%M') }})
        </p>
        <hr>
        <h4>–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:</h4>

        {% if changes.user_comments %}
            {% for group_data in changes.user_comments.values() %}
                {% if group_data.comment %}
                    <div style="background-color: #f8f9fa; border-left: 4px solid #ffc107; padding: 10px; margin-bottom: 15px;">
                        <p style="margin: 0;"><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≥—Ä—É–ø–ø–µ '{{ group_data.complex }} ({{ group_data.propType }})':</b></p>
                        <p style="margin: 0;"><i>¬´{{ group_data.comment }}¬ª</i></p>
                    </div>
                {% endif %}
            {% endfor %}
        {% endif %}

        {% if changes.modified %}
            <h5>–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏:</h5>
            <div>
                {% for change in changes.modified %}<p style="margin: 5px 0;">{{ change|safe }}</p>{% endfor %}
            </div>
        {% endif %}

        {% if changes.added %}
            <h5>–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏:</h5>
            <ul>
                {% for change in changes.added %}<li>{{ change }}</li>{% endfor %}
            </ul>
        {% endif %}

        {% if changes.removed %}
            <h5>–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏:</h5>
            <ul>
                {% for change in changes.removed %}<li>{{ change }}</li>{% endfor %}
            </ul>
        {% endif %}

        {% if not (changes.modified or changes.added or changes.removed) %}
            <p>–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–∫–∏–¥–∫–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.</p>
        {% endif %}
    """, old_v=old_version, new_v=new_version, changes=changes)

    return email_html


def create_blank_version(comment: str):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é, –ü–£–°–¢–£–Æ –∑–∞–ø–∏—Å—å –æ –≤–µ—Ä—Å–∏–∏ —Å–∫–∏–¥–æ–∫ –ë–ï–ó –ö–û–ú–ú–ò–¢–ê."""
    print(f"\n[DISCOUNT SERVICE] üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ü–£–°–¢–û–ô –≤–µ—Ä—Å–∏–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: '{comment}'")

    latest_version = DiscountVersion.query.order_by(DiscountVersion.version_number.desc()).first()

    new_version_number = 1
    if latest_version:
        new_version_number = latest_version.version_number + 1

    new_version = DiscountVersion(version_number=new_version_number, comment=comment)
    db.session.add(new_version)

    # !!! –£–î–ê–õ–ï–ù–û: db.session.commit() !!!
    db.session.flush()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º flush, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è new_version, –Ω–æ –Ω–µ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

    print(f"[DISCOUNT SERVICE] ‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è ‚Ññ{new_version_number}")
    return new_version


def clone_version_for_editing(active_version: DiscountVersion):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤ –≤–∏–¥–µ –Ω–æ–≤–æ–≥–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å–æ–∑–¥–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é.
    """
    if not active_version:
        raise ValueError("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏.")

    print(
        f"\n[DISCOUNT SERVICE] üöÄ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ‚Ññ{active_version.version_number} –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞.")

    latest_version = DiscountVersion.query.order_by(DiscountVersion.version_number.desc()).first()
    new_version_number = latest_version.version_number + 1

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤–µ—Ä—Å–∏–∏ (—á–µ—Ä–Ω–æ–≤–∏–∫)
    draft_version = DiscountVersion(
        version_number=new_version_number,
        comment=f"–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ v.{active_version.version_number}",
        is_active=False
    )
    db.session.add(draft_version)

    # –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è draft_version
    db.session.flush()

    # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–∫–∏–¥–∫–∏ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫
    for old_discount in active_version.discounts:
        new_discount = Discount(
            version_id=draft_version.id,  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º ID
            complex_name=old_discount.complex_name,
            property_type=old_discount.property_type,
            payment_method=old_discount.payment_method,
            mpp=old_discount.mpp, rop=old_discount.rop, kd=old_discount.kd, opt=old_discount.opt,
            gd=old_discount.gd, holding=old_discount.holding, shareholder=old_discount.shareholder,
            action=old_discount.action, cadastre_date=old_discount.cadastre_date
        )
        db.session.add(new_discount)
    print(f"[DISCOUNT SERVICE] üìù –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(active_version.discounts)} —Å–∫–∏–¥–æ–∫.")

    # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ñ–ö
    for old_comment in active_version.complex_comments:
        new_comment = ComplexComment(
            version_id=draft_version.id,  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º ID
            complex_name=old_comment.complex_name,
            comment=old_comment.comment
        )
        db.session.add(new_comment)
    print(f"[DISCOUNT SERVICE] üìù –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(active_version.complex_comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ñ–ö.")

    db.session.commit()
    print(
        f"[DISCOUNT SERVICE] ‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –≤–µ—Ä—Å–∏–∏ ‚Ññ{draft_version.version_number} (ID: {draft_version.id})")

    return draft_version


def update_discounts_for_version(version_id: int, form_data: dict, changes_json: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –£–ö–ê–ó–ê–ù–ù–û–ô –í–ï–†–°–ò–ò (—á–µ—Ä–Ω–æ–≤–∏–∫–∞) –∏ –ü–ï–†–ï–ó–ê–ü–ò–°–´–í–ê–ï–¢ JSON-—Å–∞–º–º–∞—Ä–∏.
    """
    target_version = DiscountVersion.query.get(version_id)
    if not target_version:
        return "–û—à–∏–±–∫–∞: –í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    if target_version.is_active:
        return "–û—à–∏–±–∫–∞: –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é."

    discounts_map = {
        (d.complex_name, d.property_type.value, d.payment_method.value): d
        for d in target_version.discounts
    }

    updated_fields_count = 0

    for key, field_value in form_data.items():
        if key.startswith('discount-'):
            try:
                data_part = key[len('discount-'):]
                business_key_str, field_name = data_part.rsplit('-', 1)
                complex_name, prop_type, payment_method = business_key_str.split('|')
            except ValueError:
                continue

            discount_to_update = discounts_map.get((complex_name, prop_type, payment_method))

            if discount_to_update:
                try:
                    new_value = float(field_value) / 100.0
                    if abs(getattr(discount_to_update, field_name) - new_value) > 1e-9:
                        setattr(discount_to_update, field_name, new_value)
                        updated_fields_count += 1
                except (ValueError, TypeError):
                    continue

    print(f"\n[DISCOUNT UPDATE] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤–µ—Ä—Å–∏–∏ ‚Ññ{target_version.version_number} (ID: {version_id})")
    try:
        # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON –∫–∞–∫ —Ç–µ–∫—Å—Ç.
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—É–¥–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏.
        target_version.changes_summary_json = changes_json
        print(f"[DISCOUNT UPDATE] üíæ JSON-—Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤–µ—Ä—Å–∏–∏ ‚Ññ{target_version.version_number} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"[DISCOUNT UPDATE] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {e}")

    if updated_fields_count > 0:
        db.session.commit()
        print(f"[DISCOUNT UPDATE] ‚úîÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –ø–æ–ª–µ–π: {updated_fields_count}")
        return f"–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    else:
        db.session.rollback()
        print("[DISCOUNT UPDATE] ‚ùï –ù–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î.")
        return "–ò–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."


def activate_version(version_id: int, activation_comment: str = None):
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–µ—Ä—Å–∏—é, –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ 'was_ever_activated'
    –∏ –≥–æ—Ç–æ–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è email.
    """
    # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤—É—é –≤–µ—Ä—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–æ–∑–±—É–∂–¥–∞–µ–º –æ—à–∏–±–∫—É 404
    target_version = DiscountVersion.query.get(version_id)
    if not target_version:
        raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è —Å ID: {version_id}")

    # --- –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ ---
    if activation_comment:
        target_version.comment = activation_comment
        print(
            f"[DISCOUNT SERVICE] üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –≤–µ—Ä—Å–∏–∏ ‚Ññ{target_version.version_number} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: '{activation_comment}'")

    # --- –®–∞–≥ 2: –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é, —á—Ç–æ–±—ã –µ–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ---
    old_active_version = DiscountVersion.query.filter_by(is_active=True).first()
    if old_active_version:
        old_active_version.is_active = False

    # --- –®–∞–≥ 3: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–∞—à—É —Ü–µ–ª–µ–≤—É—é –≤–µ—Ä—Å–∏—é ---
    target_version.is_active = True

    # --- –®–∞–≥ 4: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —ç—Ç–∞ –≤–µ—Ä—Å–∏—è –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Ö–æ—Ç—è –±—ã —Ä–∞–∑ ---
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤ –±—É–¥—É—â–µ–º –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –µ–µ —É–¥–∞–ª–µ–Ω–∏–µ.
    if not target_version.was_ever_activated:
        target_version.was_ever_activated = True
        print(f"[DISCOUNT SERVICE] üö© –î–ª—è –≤–µ—Ä—Å–∏–∏ ‚Ññ{target_version.version_number} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ 'was_ever_activated'.")

    # --- –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î ---
    db.session.commit()
    print(f"[DISCOUNT SERVICE] ‚úîÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–µ—Ä—Å–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î.")

    # --- –®–∞–≥ 6: –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    email_data = None
    if old_active_version:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON-—Å–∞–º–º–∞—Ä–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        comments_data = json.loads(target_version.changes_summary_json) if target_version.changes_summary_json else None

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-—Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        summary_html = _generate_version_comparison_summary(old_active_version, target_version,
                                                            comments_data=comments_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞
        subject = f"ApartmentFinder: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–∫–∏–¥–æ–∫ ‚Ññ{target_version.version_number}"

        email_data = {'subject': subject, 'html_body': summary_html}

    return email_data