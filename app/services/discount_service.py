from datetime import date
from sqlalchemy.orm import joinedload
from ..core.extensions import db
from ..models.discount_models import Discount, PropertyType, PaymentMethod
from ..models.estate_models import EstateSell
import pandas as pd
import io
import copy
from ..models.discount_models import Discount, DiscountVersion, PropertyType, PaymentMethod


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (process_discounts_from_excel, –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
def create_new_version(comment: str):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å–∏—Å—Ç–µ–º—ã —Å–∫–∏–¥–æ–∫, –∫–æ–ø–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π."""
    print(f"\n[DISCOUNT SERVICE] üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: '{comment}'")

    latest_version = DiscountVersion.query.order_by(DiscountVersion.version_number.desc()).first()

    new_version_number = 1
    if latest_version:
        new_version_number = latest_version.version_number + 1

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –≤–µ—Ä—Å–∏–∏
    new_version = DiscountVersion(version_number=new_version_number, comment=comment)
    db.session.add(new_version)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è, –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–∫–∏–¥–∫–∏ –∏–∑ –Ω–µ–µ
    if latest_version:
        for old_discount in latest_version.discounts:
            new_discount = Discount(
                version=new_version,
                complex_name=old_discount.complex_name,
                property_type=old_discount.property_type,
                payment_method=old_discount.payment_method,
                mpp=old_discount.mpp,
                rop=old_discount.rop,
                kd=old_discount.kd,
                opt=old_discount.opt,
                gd=old_discount.gd,
                holding=old_discount.holding,
                shareholder=old_discount.shareholder,
                action=old_discount.action,
                cadastre_date=old_discount.cadastre_date
            )
            db.session.add(new_discount)

    db.session.commit()
    print(f"[DISCOUNT SERVICE] ‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤–µ—Ä—Å–∏—è ‚Ññ{new_version_number}")
    return new_version

def activate_version(version_id: int):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é, –¥–µ–ª–∞—è –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏."""
    print(f"[DISCOUNT SERVICE] üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏ ID: {version_id}...")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π
    DiscountVersion.query.update({DiscountVersion.is_active: False})
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –Ω—É–∂–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    target_version = DiscountVersion.query.get(version_id)
    if target_version:
        target_version.is_active = True
        db.session.commit()
        print(f"[DISCOUNT SERVICE] ‚úîÔ∏è –í–µ—Ä—Å–∏—è ‚Ññ{target_version.version_number} (ID: {version_id}) —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–∞.")
    else:
        print(f"[DISCOUNT SERVICE] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è —Å ID: {version_id}")


def update_discounts_for_version(version_id: int, form_data: dict, comment: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–∞–º–º–∞—Ä–∏ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    target_version = DiscountVersion.query.get(version_id)
    if not target_version:
        return "–û—à–∏–±–∫–∞: –í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    changes_summary = []

    parsed_data = {}
    for key, value in form_data.items():
        if key.startswith('discount-'):
            parts = key.split('-')
            discount_id = int(parts[1])
            field_name = parts[2]
            parsed_data.setdefault(discount_id, {})[field_name] = value

    for discount_id, fields in parsed_data.items():
        discount = Discount.query.get(discount_id)
        if not discount or discount.version_id != target_version.id:
            continue

        log_prefix = f"  - {discount.complex_name} | {discount.property_type.value} | {discount.payment_method.value}:"

        for field, new_value_str in fields.items():
            try:
                new_value = float(new_value_str) / 100.0
                old_value = getattr(discount, field)

                if abs(old_value - new_value) > 1e-9:  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è float
                    changes_summary.append(
                        f"{log_prefix} –ø–æ–ª–µ '{field.upper()}' –∏–∑–º–µ–Ω–µ–Ω–æ —Å {old_value * 100:.1f}% –Ω–∞ {new_value * 100:.1f}%")
                    setattr(discount, field, new_value)
            except (ValueError, TypeError):
                continue

    if changes_summary:
        print(
            f"\n[DISCOUNT UPDATE] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤–µ—Ä—Å–∏–∏ ‚Ññ{target_version.version_number} (ID: {version_id})")
        # --- –í–´–í–û–î–ò–ú –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô ---
        print(f"[COMMENT] üí¨: {comment}")
        for change in changes_summary:
            print(change)
        db.session.commit()
        print("[DISCOUNT UPDATE] ‚úîÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î.")
        return f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(changes_summary)} –∏–∑–º–µ–Ω–µ–Ω–∏–π."
    else:
        print(f"\n[DISCOUNT UPDATE] ‚ùï –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –≤–µ—Ä—Å–∏–∏ ‚Ññ{target_version.version_number}.")
        return "–ò–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

def _normalize_percentage(value):
    try:
        num_value = float(value)
        if num_value > 1.0: return num_value / 100.0
        return num_value
    except (ValueError, TypeError):
        return 0.0


def process_discounts_from_excel(file_path: str, version_id: int):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Excel-—Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –£–ö–ê–ó–ê–ù–ù–û–ô –í–ï–†–°–ò–ò.
    """
    print(f"\n[DISCOUNT SERVICE] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {file_path} –¥–ª—è –≤–µ—Ä—Å–∏–∏ ID: {version_id}")
    df = pd.read_excel(file_path)
    created_count, updated_count = 0, 0

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
    existing_discounts = {
        (d.complex_name, d.property_type, d.payment_method): d
        for d in Discount.query.filter_by(version_id=version_id).all()
    }

    for index, row in df.iterrows():
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
        key = (
            row['–ñ–ö'],
            PropertyType(row['–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏']),
            PaymentMethod(row['–¢–∏–ø –æ–ø–ª–∞—Ç—ã'])
        )

        discount = existing_discounts.get(key)

        if not discount:
            discount = Discount(
                version_id=version_id,  # <-- –ü–†–ò–í–Ø–ó–ö–ê –ö –í–ï–†–°–ò–ò
                complex_name=row['–ñ–ö'],
                property_type=PropertyType(row['–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏']),
                payment_method=PaymentMethod(row['–¢–∏–ø –æ–ø–ª–∞—Ç—ã'])
            )
            db.session.add(discount)
            created_count += 1
        else:
            updated_count += 1

        # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ–º mpp, rop –∏ —Ç.–¥. –æ—Å—Ç–∞–µ—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ...
        discount.mpp = _normalize_percentage(row.get('–ú–ü–ü'))
        discount.rop = _normalize_percentage(row.get('–†–û–ü'))
        discount.kd = _normalize_percentage(row.get('–ö–î'))
        discount.opt = _normalize_percentage(row.get('–û–ü–¢'))
        discount.gd = _normalize_percentage(row.get('–ì–î'))
        discount.holding = _normalize_percentage(row.get('–•–æ–ª–¥–∏–Ω–≥'))
        discount.shareholder = _normalize_percentage(row.get('–ê–∫—Ü–∏–æ–Ω–µ—Ä'))
        discount.action = _normalize_percentage(row.get('–ê–∫—Ü–∏—è'))
        cadastre_date_val = row.get('–î–∞—Ç–∞ –∫–∞–¥–∞—Å—Ç—Ä–∞')
        if pd.notna(cadastre_date_val):
            try:
                discount.cadastre_date = pd.to_datetime(cadastre_date_val).date()
            except (ValueError, TypeError):
                discount.cadastre_date = None
        else:
            discount.cadastre_date = None

    # –ù–µ –∫–æ–º–º–∏—Ç–∏–º –∑–¥–µ—Å—å, –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
    return f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫. –°–æ–∑–¥–∞–Ω–æ: {created_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}."


def generate_discount_template_excel():
    from .data_service import get_all_complex_names
    print("[DISCOUNT SERVICE] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ —Å–∫–∏–¥–æ–∫...")
    complex_names = get_all_complex_names()
    headers = ['–ñ–ö', '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', '–¢–∏–ø –æ–ø–ª–∞—Ç—ã', '–î–∞—Ç–∞ –∫–∞–¥–∞—Å—Ç—Ä–∞', '–ú–ü–ü', '–†–û–ü', '–ö–î', '–û–ü–¢', '–ì–î', '–•–æ–ª–¥–∏–Ω–≥',
               '–ê–∫—Ü–∏–æ–Ω–µ—Ä', '–ê–∫—Ü–∏—è']
    data = []
    for name in complex_names:
        for prop_type in PropertyType:
            for payment_method in PaymentMethod:
                row = {'–ñ–ö': name, '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏': prop_type.value, '–¢–∏–ø –æ–ø–ª–∞—Ç—ã': payment_method.value,
                       '–î–∞—Ç–∞ –∫–∞–¥–∞—Å—Ç—Ä–∞': '', '–ú–ü–ü': 0, '–†–û–ü': 0, '–ö–î': 0, '–û–ü–¢': 0, '–ì–î': 0, '–•–æ–ª–¥–∏–Ω–≥': 0, '–ê–∫—Ü–∏–æ–Ω–µ—Ä': 0,
                       '–ê–∫—Ü–∏—è': 0}
                data.append(row)
    df = pd.DataFrame(data, columns=headers)
    output = io.BytesIO()
    df.to_excel(output, index=False, sheet_name='–®–∞–±–ª–æ–Ω —Å–∫–∏–¥–æ–∫')
    output.seek(0)
    return output


def get_discounts_with_summary():
    """
    –í–µ—Ä—Å–∏—è 10: –†–ê–ë–û–¢–ê–ï–¢ –° –ê–ö–¢–ò–í–ù–û–ô –í–ï–†–°–ò–ï–ô –°–ö–ò–î–û–ö.
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –≤–∏–¥—ã –æ–ø–ª–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–≥–∏.
    """
    # 1. –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é
    active_version = DiscountVersion.query.filter_by(is_active=True).first()
    if not active_version:
        return {}  # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ

    # 2. –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫–∏ –¢–û–õ–¨–ö–û –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    all_discounts = active_version.discounts
    # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ get_discounts_with_summary –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –≤ discount_service.py

    all_sells = EstateSell.query.options(joinedload(EstateSell.house)).all()

    if not all_discounts: return {}

    discounts_map = {}
    for d in all_discounts:
        discounts_map.setdefault(d.complex_name, []).append(d)

    sells_by_complex = {}
    for s in all_sells:
        if s.house:
            sells_by_complex.setdefault(s.house.complex_name, []).append(s)

    final_data = {}
    valid_statuses = ["–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π —Ä–µ–∑–µ—Ä–≤", "–ü–æ–¥–±–æ—Ä"]
    tag_fields = {'kd': '–ö–î', 'opt': '–û–ü–¢', 'gd': '–ì–î', 'holding': '–•–æ–ª–¥–∏–Ω–≥', 'shareholder': '–ê–∫—Ü–∏–æ–Ω–µ—Ä'}

    all_complex_names = sorted(list(discounts_map.keys()))

    for complex_name in all_complex_names:
        summary = {"sum_100_payment": 0, "sum_mortgage": 0, "months_to_cadastre": None, "avg_remainder_price_sqm": 0,
                   "available_tags": set(), "max_action_discount": 0.0}

        discounts_in_complex = discounts_map.get(complex_name, [])
        details_with_derived = {}

        for discount in discounts_in_complex:
            prop_type_val = discount.property_type.value
            details_with_derived.setdefault(prop_type_val, []).append(discount)

            if discount.property_type == PropertyType.FLAT:
                derived_discount = None
                if discount.payment_method == PaymentMethod.FULL_PAYMENT:
                    derived_discount = copy.copy(discount)
                    derived_discount.payment_method = PaymentMethod.TRANCHE_100
                    derived_discount.kd = 0
                elif discount.payment_method == PaymentMethod.MORTGAGE:
                    derived_discount = copy.copy(discount)
                    derived_discount.payment_method = PaymentMethod.TRANCHE_MORTGAGE
                    derived_discount.kd = 0

                if derived_discount:
                    details_with_derived[prop_type_val].append(derived_discount)

        base_discount_100 = next((d for d in discounts_in_complex if
                                  d.property_type == PropertyType.FLAT and d.payment_method == PaymentMethod.FULL_PAYMENT),
                                 None)
        base_discount_mortgage = next((d for d in discounts_in_complex if
                                       d.property_type == PropertyType.FLAT and d.payment_method == PaymentMethod.MORTGAGE),
                                      None)

        if base_discount_100:
            summary["sum_100_payment"] = base_discount_100.mpp + base_discount_100.rop
            if base_discount_100.cadastre_date:
                today = date.today()
                if base_discount_100.cadastre_date > today:
                    delta = base_discount_100.cadastre_date - today
                    summary["months_to_cadastre"] = int(delta.days / 30.44)

        if base_discount_mortgage:
            summary["sum_mortgage"] = base_discount_mortgage.mpp + base_discount_mortgage.rop

        total_discount_rate = (
                base_discount_100.mpp + base_discount_100.rop + base_discount_100.kd) if base_discount_100 else 0
        remainder_prices_per_sqm = []
        for sell in sells_by_complex.get(complex_name, []):
            if (
                    sell.estate_sell_status_name in valid_statuses and sell.estate_sell_category == 'flat' and sell.estate_price and sell.estate_price > 0 and sell.estate_area and sell.estate_area > 0):
                price_after_deduction = sell.estate_price - 3_000_000
                if price_after_deduction > 0:
                    final_price = price_after_deduction * (1 - total_discount_rate)
                    remainder_prices_per_sqm.append(final_price / sell.estate_area)
        if remainder_prices_per_sqm:
            avg_price_per_sqm = sum(remainder_prices_per_sqm) / len(remainder_prices_per_sqm)
            summary["avg_remainder_price_sqm"] = avg_price_per_sqm / 12500

        for discount in discounts_in_complex:
            if discount.action > summary["max_action_discount"]:
                summary["max_action_discount"] = discount.action
            for field, tag_name in tag_fields.items():
                if getattr(discount, field, 0) > 0:
                    summary["available_tags"].add(tag_name)

        final_data[complex_name] = {"summary": summary, "details": details_with_derived}

    return final_data
